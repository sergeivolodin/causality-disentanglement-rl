import sparse_causal_model_learner_rl.toy_datasets.dots
import sparse_causal_model_learner_rl.trainable.autoencoder
import sparse_causal_model_learner_rl.loss.autoencoder
import sparse_causal_model_learner_rl.loss.optimizer
import sparse_causal_model_learner_rl.trainable.fcnet
import sparse_causal_model_learner_rl.trainable.sequential
import sparse_causal_model_learner_rl.metrics.context_rewrite
include 'base_learner.gin'

DIM_H = 5
DIM_W = 5
N_OBJ = 6
HWC = 75
HWO = 150

image_object_positions.h = %DIM_H
image_object_positions.w = %DIM_W
random_coordinates.h = %DIM_H
random_coordinates.w = %DIM_W
random_coordinates_n.n = %N_OBJ
random_coordinates_n_no_overlap.n = %N_OBJ
random_coordinates_n_no_overlap.h = %DIM_H
random_coordinates_n_no_overlap.w = %DIM_W


Config.coords_function = @random_coordinates_n_no_overlap

image_object_positions.colors = ['red', 'green', 'blue',
                                 'orange', 'magenta', 'white']

Config.n_samples_test = 2000
Config.learner_cls = "sparse_causal_model_learner_rl.learners.dots_learner.DotsLearner"

Config.autoencoder = @ModelAutoencoder

HID_DIM = 40
Config.collect_every = 100
Config.collect_once = False
Config.n_samples_train = 10000
opt1/Optimizer.lr = 1e-2

# CONVOLUTIONAL (ENC?DEC)
enc/Conv2d.in_channels = 3
enc/Conv2d.out_channels = %N_OBJ
enc/Conv2d.kernel_size = 1

dec/Conv2d.in_channels = %N_OBJ
dec/Conv2d.out_channels = 3
dec/Conv2d.kernel_size = 1

# RESHAPE
enc/Reshape.shape = (%HWO,)
dec/Reshape.shape = (%N_OBJ, %DIM_H, %DIM_W)

# LINEAR
enc/Linear.in_features = %HWO
enc/Linear.out_features = %HID_DIM

dec1/Linear.in_features = %HID_DIM
dec1/Linear.out_features = 1000

dec2/Linear.in_features = 1000
dec2/Linear.out_features = %HWO


enc/ChannelSwap.order = 'hwc_chw'
dec/ChannelSwap.order = 'chw_hwc'

ae/Sequential.items = [
    # @enc/ChannelSwap(),
    @enc/Conv2d(),
    @enc/Reshape(),
    @enc/Linear(),
    # no activation function
    @dec1/Linear(),
    @Sigmoid(),
    @dec2/Linear(),
    @Sigmoid(),
    @dec/Reshape(),
    @dec/Conv2d(),
    # @dec/ChannelSwap(),
]

ModelAutoencoder.model_cls = @ae/Sequential
ModelAutoencoder.flatten = False

Config.potential_trainables_list = [
    {'name': 'autoencoder'},
]

ae_loss.loss_fcn = @pow_loss
pow_loss.power = 3.5

Config.losses = {'fit': {'fcn': @ae_loss, 'coeff': 1.0},}

opt1/Optimizer.name = 'Adam'

Config.optimizers = {'opt1': @opt1/Optimizer}
Config.execution = {'opt1': ['fit']}

test_loss/context_rewriter.function = @ae_loss
test_loss/context_rewriter.rewrite = {'X_chw': 'Xtest_chw'}

Config.metrics = {'test_loss': @test_loss/context_rewriter}

Config.image_every = 100
Config.checkpoint_every = 1000
Config.report_every = 50
Config.metrics_every = 50
Config.shuffle = True
Config.batch_training = True
Config.keep_history = False
Config.train_steps = 50000
Config.report_weights = False
Config.tune_no_empty_report = True


tune_run.resources_per_trial = {'cpu': 1, 'gpu': 0.1}