import sparse_causal_model_learner_rl.trainable.decoder
import sparse_causal_model_learner_rl.trainable.reconstructor
import sparse_causal_model_learner_rl.trainable.model
import sparse_causal_model_learner_rl.config
import sparse_causal_model_learner_rl.annealer.threshold
import sparse_causal_model_learner_rl.loss.losses
import sparse_causal_model_learner_rl.loss.optimizer
import sparse_causal_model_learner_rl.metrics.nnz
import sparse_causal_model_learner_rl.metrics.loss_thresholded
import gin_tune
include 'common.gin'

tune_run.num_samples = 100
tune_run.resources_per_trial = {'gpu': 0.1, 'cpu': 1}

Config.train_steps = 20000
Config.env_steps = 1000

Config.loss_every = 500
Config.graph_every = 500
Config.checkpoint_every = 10000
Config.report_every = 20
Config.metrics_every = 20

Config.keep_history = True
# Config.max_history_size = 10000

LinearDecoder.use_batchnorm = True

Config.model = @LinearModel
Config.decoder = @LinearDecoder
Config.reconstructor = @LinearReconstructor

fdim/choice.categories = [4, 5, 6, 7, 8, 9, 10, 15, 20, 30]
Config.feature_shape = (@fdim/choice(), )

ThresholdAnnealer.fit_threshold = 1e-3
ThresholdAnnealer.factor = 0.5
ThresholdAnnealer.adjust_every = 50

Config._update_function = [@ThresholdAnnealer]

Config.losses = {'fit': {'fcn': @fit_loss, 'coeff': 1.0},
                 'sparsity': {'fcn': @sparsity_loss, 'coeff': 1e-9},
                 'reconstruction': {'fcn': @reconstruction_loss, 'coeff': 1.0}
                }

loss_thresholded.eps = 1e-3
loss_thresholded.loss = @fit_loss
loss_thresholded.delta = False

nnz.eps = 1e-3
Config.metrics = {'nnz': @nnz, 'with_sparsity_fit': @loss_thresholded}

opt1/Optimizer.lr = 1e-3

Config.optimizers = {'opt1': @opt1/Optimizer}
Config.execution = {'opt1': ['fit', 'sparsity', 'reconstruction']}

LinearModel.use_bias = False

sparsity_loss.ord = 1