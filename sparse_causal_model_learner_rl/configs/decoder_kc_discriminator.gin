import sparse_causal_model_learner_rl.trainable.decoder
import sparse_causal_model_learner_rl.trainable.reconstructor
import sparse_causal_model_learner_rl.trainable.model
import sparse_causal_model_learner_rl.trainable.gumbel_switch
import sparse_causal_model_learner_rl.trainable.discriminator
import sparse_causal_model_learner_rl.config
import sparse_causal_model_learner_rl.annealer.threshold
import sparse_causal_model_learner_rl.loss.losses
import sparse_causal_model_learner_rl.loss.optimizer
import sparse_causal_model_learner_rl.loss.causal_discriminator
import sparse_causal_model_learner_rl.metrics.nnz
import sparse_causal_model_learner_rl.metrics.loss_thresholded
import sparse_causal_model_learner_rl.metrics.model_entropy
import gin_tune
import sparse_causal_model_learner_rl.trainable.value_predictor
import sparse_causal_model_learner_rl.trainable.fcnet
import sparse_causal_model_learner_rl.learners.input_normalizer
include 'common.gin'

tune_run.num_samples = 1

decoder/FCNet.hidden_sizes = [150, 150, 150]
decoder/FCNet.activation_cls = @Tanh
ModelDecoder.model_cls = @decoder/FCNet
ModelDecoder.use_batchnorm = False

dec_agg/FCNet.hidden_sizes = [100, 50]
dec_agg/FCNet.activation_cls = @ReLU

net_f/FCNet.hidden_sizes = []
net_f/FCNet.activation_cls = None

DecoderDiscriminator.observation_embedding_dim = 20
DecoderDiscriminator.feature_embedding_dim = 20
DecoderDiscriminator.input_embedder_cls = {'o_t': @decoder/FCNet,
                                           'f_t': @net_f/FCNet,}

DecoderDiscriminator.aggregator_cls = @dec_agg/FCNet

Config.env_steps = 5000
Config.collect_every = 100
Config.batch_training = False
Config.shuffle = False

Config.model = None
Config.decoder = @ModelDecoder
Config.reconstructor = None
Config.value_predictor = None
Config.decoder_discriminator = @DecoderDiscriminator

Config.feature_shape = (20, )

opt1/Optimizer.name = 'Adam'
opt2/Optimizer.name = 'Adam'
opt1/Optimizer.lr = 1e-3
opt2/Optimizer.lr = 1e-3

Config.metrics = {'episode_reward': @episode_reward,}
Config.schedulers = {}

Config.optimizers = {'opt1': @opt1/Optimizer, 'opt2': @opt2/Optimizer}
Config.execution = {'opt1': ['discriminate'], 'opt2': ['discriminate']}
Config.losses = {'discriminate': {'fcn': @decoder_discriminator_loss, 'coeff': 1.0}}

Config.optim_params = {'opt1': ['decoder', 'decoder_discriminator'], 'opt2': ['decoder_discriminator']}

Config._update_function = []

Config.loss_every = 99999999999999
Config.graph_every = 99999999999999
Config.report_weights = False
Config.keep_history = False