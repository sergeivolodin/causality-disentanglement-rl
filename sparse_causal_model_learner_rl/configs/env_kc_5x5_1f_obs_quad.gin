# VectorIncrement 2 DIGITS CONFIG

# the environment
# add env config separately!
#include '../../keychest/config/5x5_onlycoord.gin'
#include 'with_secondary_stage_features.gin'
include 'remote_collect.gin'
#include 'with_additional_features.gin'
import sparse_causal_model_learner_rl.trainable.quadratic_neuron
import sparse_causal_model_learner_rl.trainable.poly_activation

N_FEATURES = 6 # player 2, health, food x2 -> 

# DATA COLLECTION PREFS
Config.min_collected_sample_ratio = 0.5
Config.buffer_steps = 100000
Config.minibatch_size = 2000
Config.n_collectors = 4
Config.env_steps = 2000
Config.collect_initial_steps = 100000
tune_run.resources_per_trial = {'gpu': 0.4, 'cpu': 4}
Config.collect_every = 1
Config.batch_training = False
Config.shuffle = False
Config.train_steps = 10000000


# FEATURE SPACE
Config.feature_shape = (%N_FEATURES, )

# DECODER
Config.decoder = @ModelDecoder
decoder/FCCombinedModel.hidden_sizes = [1024]
decoder/FCCombinedModel.activation_cls = [@LeakyReLU, @PolyAct]
decoder/FCCombinedModel.add_input_batchnorm = False
decoder/FCCombinedModel.input_reshape = True
ModelDecoder.model_cls = @decoder/FCCombinedModel
ModelDecoder.flatten = True
ModelDecoder.use_batchnorm = False

PolyAct.orig_act_cls = @Sin

# MODEL
Config.model = @sparse_model/ManyNetworkCombinedModel
model_gnn/FCCombinedModel.hidden_sizes = [512, 512, 1024]  # tuning...
model_gnn/FCCombinedModel.activation_cls = [@LeakyReLU, @LeakyReLU, @LeakyReLU, @PolyAct]
model_gnn/FCCombinedModel.layers = [@CombinedQuadraticLayer, @CombinedLinearLayer, @CombinedLinearLayer, @CombinedLinearLayer]
model_gnn/FCCombinedModel.skipconns = None #[False, True, False]
WithInputSwitch.model_cls = @model_gnn/FCCombinedModel
sparse_model/ManyNetworkCombinedModel.model_cls = @sparse_model/WithInputSwitch
ManyNetworkCombinedModel.sparse_do_max = False
ManyNetworkCombinedModel.sparse_do_max_mfma = False
ManyNetworkCombinedModel.add_linear_transform = False
#ManyNetworkCombinedModel.predict_change = True
sparse_model/WithInputSwitch.enable_switch = True
LearnableSwitchSimple.init_identity_up_to = %N_FEATURES

# RECONSTRUCTOR
Config.reconstructor = @ModelReconstructor
ModelReconstructor.model_cls = @rec/FCCombinedModel
ModelReconstructor.unflatten = True
rec/FCCombinedModel.hidden_sizes = [256, 128]
rec/FCCombinedModel.layers = @CombinedLinearLayer # @Quadratic #[@CombinedQuadraticLayer, @CombinedQuadraticLayer, @CombinedQuadraticLayer]
rec/FCCombinedModel.activation_cls = [@LeakyReLU, @LeakyReLU, @PolyAct]
rec/FCCombinedModel.input_reshape = True

model_gnn/FCCombinedModel.add_input_batchnorm = False
decoder/FCCombinedModel.add_input_batchnorm = False
rec/FCCombinedModel.add_input_batchnorm = False
rec/FCNet.add_input_batchnorm = False

TARGET_REC = 1e-3
TARGET_FIT_OBS = 0.015
TARGET_FIT_FEAT = 0.02
TARGET_FIT_ADD = 1e-3

TARGET_PER_COMPONENT_REC = 0
TARGET_PER_COMPONENT_FIT_OBS = 2e-3
TARGET_PER_COMPONENT_FIT_FEAT = 2e-2
TARGET_PER_COMPONENT_FIT_ADD = 2e-3

MAX_LOSS_DIM = 210

BURSTS_TIME_SCALES = {'opt1d': 2, 'opt1m': 1, 'opt1r': 2} 

reconstruction_loss.disable = True

LearnableSwitchSimple.initial_proba = 1.0
LearnableSwitchSimple.init_identity_up_to = 0

Config.opt_iterations = {
#    'opt1': 1,

    'opt1d': 2,
    'opt1m': 2,
    'opt1r': 2,

    'opt2': 6
}


causal_learner_stopping_condition.edges_Mf = 2
causal_learner_stopping_condition.edges_Ma = 4

# does not decrease the obs loss significantly
#fit_loss_obs_space.divide_by_std = False
