import sparse_causal_model_learner_rl.trainable.decoder
import sparse_causal_model_learner_rl.trainable.reconstructor
import sparse_causal_model_learner_rl.trainable.model
import sparse_causal_model_learner_rl.trainable.gumbel_switch
import sparse_causal_model_learner_rl.trainable.discriminator
import sparse_causal_model_learner_rl.config
import sparse_causal_model_learner_rl.annealer.threshold
import sparse_causal_model_learner_rl.loss.losses
import sparse_causal_model_learner_rl.loss.optimizer
import sparse_causal_model_learner_rl.loss.causal_discriminator
import sparse_causal_model_learner_rl.metrics.nnz
import sparse_causal_model_learner_rl.metrics.loss_thresholded
import sparse_causal_model_learner_rl.metrics.model_entropy
import gin_tune
import sparse_causal_model_learner_rl.trainable.value_predictor
import sparse_causal_model_learner_rl.trainable.fcnet
import sparse_causal_model_learner_rl.learners.input_normalizer
include 'common.gin'

# l2 shouldn't be the same actually for 1-hot and coord representations...

tune_run.num_samples = 1

decoder/FCNet.hidden_sizes = [150, 150, 150]
decoder/FCNet.activation_cls = @Tanh
ModelDecoder.model_cls = @decoder/FCNet
ModelDecoder.use_batchnorm = False

Config.env_steps = 5000
Config.collect_every = 100
Config.batch_training = False
Config.shuffle = False

# Config.model = None
Config.decoder = @ModelDecoder
Config.reconstructor = None
Config.value_predictor = None
Config.causal_feature_model_discriminator = None

Config.feature_shape = (20, )

opt1/Optimizer.name = 'Adam'
opt2/Optimizer.name = 'Adam'
opt1/Optimizer.lr = 1e-3
opt2/Optimizer.lr = 1e-3

Config.metrics = {'episode_reward': @episode_reward,}
sch/Scheduler.name = 'ReduceLROnPlateau'
sch/Scheduler.patience = 150
sch/Scheduler.verbose = True
sch/Scheduler.factor = 0.5

Config.schedulers = {'opt1': @sch/Scheduler,}

Config.optimizers = {'opt1': @opt1/Optimizer}#, 'opt2': @opt2/Optimizer}
Config.execution = {'opt1': ['discriminate_siamese', 'fit']}#, 'opt2': ['discriminate']}
Config.losses = {'discriminate_siamese': {'fcn': @siamese_feature_discriminator_l2, 'coeff': 1.0},
                'fit': {'fcn': @fit_loss, 'coeff': 1.0}}

Config.optim_params = {'opt1': ['decoder', 'model']}#, 'causal_feature_model_discriminator']}

Config._update_function = []

Config.loss_every = 99999999999999
Config.graph_every = 99999999999999
Config.report_weights = False
Config.keep_history = False
Config.checkpoint_every = 500

Config.grad_clip_value = 1e-2
Config.run_communicator = True

# normalize input data
Normalizer.once = True
Normalizer.dim = 0
normalize_context_transform.normalize_context_dct = {'obs': ['obs_x', 'obs_y', 'obs'],}
Config.context_transforms = [@normalize_context_transform]

siamese_feature_discriminator_l2.margin = 1.0

model_gnn/FCNet.hidden_sizes = [60, 60, 60]
model_gnn/FCNet.activation_cls = @ReLU

ManyNetworkModel.skip_connection = False
ManyNetworkModel.model_cls = @model_gnn/FCNet
Config.model = @ManyNetworkModel